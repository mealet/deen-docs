{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Deen",
	"scopeName": "source.deen",
	"fileTypes": ["deen", "dn"],
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#types"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#chars"
		},
		{
			"include": "#macros"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#structures"
		},
		{
			"include": "#imports-includes"
		},
		{
			"include": "#special-identifiers"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.deen",
					"match": "//.*$"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.deen",
					"match": "\\b(if|else|while|for|break|return)\\b"
				},
				{
					"name": "keyword.declaration.deen",
					"match": "\\b(let|pub|ext|fn|import|include|extern|struct|enum|typedef|_extern_declare)\\b"
				},
				{
					"name": "constant.language.deen",
					"match": "\\b(true|false|NULL)\\b"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "storage.type.primitive.deen",
					"match": "\\b(i8|i16|i32|i64|u8|u16|u32|u64|usize|f32|f64|bool|char|void)\\b"
				},
				{
					"name": "storage.type.pointer.deen",
					"match": "\\*\\b(i8|i16|i32|i64|u8|u16|u32|u64|usize|f32|f64|bool|char|void)\\b"
				},
				{
					"name": "entity.name.type.struct.deen",
					"match": "\\b[A-Z][a-zA-Z0-9_]*\\b(?=\\s*\\{)"
				},
				{
					"name": "storage.type.deen",
					"match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.assignment.deen",
					"match": "="
				},
				{
					"name": "keyword.operator.arithmetic.deen",
					"match": "(\\+|-|\\*|/|%)"
				},
				{
					"name": "keyword.operator.comparison.deen",
					"match": "(==|!=|<|>|<=|>=)"
				},
				{
					"name": "keyword.operator.dereference.deen",
					"match": "\\*"
				},
				{
					"name": "keyword.operator.address-of.deen",
					"match": "&"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.deen",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.deen",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.hex.deen",
					"match": "\\b0x[0-9a-fA-F_]+\\b"
				},
				{
					"name": "constant.numeric.binary.deen",
					"match": "\\b0b[01_]+\\b"
				},
				{
					"name": "constant.numeric.integer.deen",
					"match": "\\b\\d[\\d_]*\\b"
				},
				{
					"name": "constant.numeric.float.deen",
					"match": "\\b\\d[\\d_]*\\.\\d[\\d_]*([eE][+-]?\\d[\\d_]*)?\\b"
				}
			]
		},
		"chars": {
			"patterns": [
				{
					"name": "constant.character.deen",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape.deen",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"macros": {
			"patterns": [
				{
					"name": "entity.name.function.macro.deen",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*!\\b"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"name": "entity.name.function.deen",
					"match": "\\bfn\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b"
				},
				{
					"name": "support.function.builtin.deen",
					"match": "\\b(println|print)\\b(?=\\()"
				}
			]
		},
		"structures": {
			"patterns": [
				{
					"name": "entity.name.type.structure.deen",
					"match": "\\bstruct\\s+([A-Z][a-zA-Z0-9_]*)\\b"
				},
				{
					"name": "variable.other.member.deen",
					"match": "\\.([a-zA-Z_][a-zA-Z0-9_]*)\\b"
				}
			]
		},
		"imports-includes": {
			"patterns": [
				{
					"name": "keyword.control.import.deen",
					"match": "\\b(include|import)\\b"
				},
				{
					"name": "string.quoted.library.deen",
					"match": "\"@[a-zA-Z_][a-zA-Z0-9_]*\""
				}
			]
		},
		"special-identifiers": {
			"patterns": [
				{
					"name": "variable.language.placeholder.deen",
					"match": "\\b_\\b"
				}
			]
		}
	}
}
